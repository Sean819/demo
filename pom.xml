<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>sean</groupId>
    <artifactId>mes</artifactId>
    <name>mes</name>
    <version>1.0.0</version>
    <description>mes</description>
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
        <!-- docker 前缀名，通常用在上传镜像 -->
        <docker.image.prefix>sean</docker.image.prefix>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>RELEASE</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <!--加入下面两项配置-->
            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <includeSystemScope>true</includeSystemScope>
            </configuration>
        </plugin>
<!--        <plugin>-->
<!--            <groupId>sean</groupId>-->
<!--            <artifactId>mes</artifactId>-->
<!--            <version>1.0.0</version>-->
<!--            &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--            <executions>-->
<!--                <execution>-->
<!--                    <id>build-image</id>-->
<!--                    &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--                    <phase>package</phase>-->
<!--                    <goals>-->
<!--                        <goal>build</goal>-->
<!--                    </goals>-->
<!--                </execution>-->
<!--            </executions>-->
<!--            <configuration>-->
<!--                &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
<!--                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>-->
<!--                &lt;!&ndash;指定标签&ndash;&gt;-->
<!--                <imageTags>-->
<!--                    <imageTag>latest</imageTag>-->
<!--                </imageTags>-->
<!--                <baseImage>java:8</baseImage>-->
<!--                <maintainer>shuaih819@gmail.com</maintainer>-->
<!--                <workdir>/ROOT</workdir>-->
<!--                <cmd>["java", "-version"]</cmd>-->
<!--                <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>-->

<!--                &lt;!&ndash;指定远程 docker api地址&ndash;&gt;-->
<!--                <dockerHost>http://10.112.186.60:2375</dockerHost>-->

<!--&lt;!&ndash;                &lt;!&ndash; 指定 Dockerfile 路径 ${project.basedir}：项目根路径下&ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;                <dockerDirectory>${project.basedir}</dockerDirectory>&ndash;&gt;-->
<!--                &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--                <resources>-->
<!--                    <resource>-->
<!--                        <targetPath>/ROOT</targetPath>-->
<!--                        &lt;!&ndash;jar 包所在的路径 此处配置的 即对应 target 目录&ndash;&gt;-->
<!--                        <directory>${project.build.directory}</directory>-->
<!--                        &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--                        <include>${project.build.finalName}.jar</include>-->
<!--                    </resource>-->
<!--                </resources>-->
<!--                &lt;!&ndash; 以下两行是为了docker push到DockerHub使用的。 &ndash;&gt;-->
<!--                &lt;!&ndash;<serverId>docker-hub</serverId>&ndash;&gt;-->
<!--                &lt;!&ndash;<registryUrl>https://index.docker.io/v1</registryUrl>&ndash;&gt;-->
<!--            </configuration>-->
<!--        </plugin>-->
    </plugins>

    </build>

</project>
